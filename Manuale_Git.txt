Git ‚Äì Manuale Operativo di Ruben Poggiani
üìÅ Git Base
‚Ä¢	git init
Inizializza un nuovo repository Git locale. Usalo quando inizi un nuovo progetto.
‚Ä¢	git clone <url>
Clona un repository remoto sul tuo computer. Usalo per ottenere una copia di lavoro di un progetto esistente.
‚Ä¢	git status
Mostra lo stato dei file: modificati, in stage, non tracciati. Usalo per verificare cosa cambier√† nel prossimo commit.
‚Ä¢	git add <file>
Aggiunge file all'area di staging. Usalo per preparare i file prima del commit.
‚Ä¢	git commit -m "messaggio"
Salva uno snapshot del progetto. Ogni commit rappresenta uno stato preciso dei file.
‚Ä¢	git push
Invia i commit al repository remoto (GitHub, GitLab, ecc).
‚Ä¢	git pull
Scarica le modifiche dal repository remoto e aggiorna il tuo ramo locale.
üåø Branching e Workflow
‚Ä¢	git branch
Elenca tutti i branch locali.
‚Ä¢	git branch <nome>
Crea un nuovo branch.
‚Ä¢	git checkout <branch>
Sposta la HEAD su un altro branch. Usalo per lavorare su una nuova feature o correzione.
‚Ä¢	git checkout -b <nome>
Crea e passa a un nuovo branch in un solo comando.
‚Ä¢	git merge <branch>
Unisce il branch specificato nel branch attuale. Usalo per integrare il lavoro di un altro branch.
‚Ä¢	Conflitti di merge
Si risolvono modificando i file in conflitto, poi con git add + git commit.
üì¶ Versioning
‚Ä¢	git tag <nome>
Crea un'etichetta sul commit corrente. Usalo per marcare versioni importanti.
‚Ä¢	git push origin <tag>
Pusha i tag sul repository remoto.
üíæ Git Stash
‚Ä¢	git stash
Salva temporaneamente le modifiche non committate. Utile se devi cambiare branch senza perdere modifiche.
‚Ä¢	git stash list
Mostra tutti gli stash salvati.
‚Ä¢	git stash pop
Recupera e rimuove l‚Äôultimo stash.
‚Ä¢	git stash apply
Applica uno stash senza rimuoverlo.
‚Ä¢	git stash drop <id>
Rimuove uno stash specifico.
‚Ä¢	git stash clear
Rimuove tutti gli stash salvati.
üîÅ Git Rebase
‚Ä¢	git rebase <branch>
Riscrive la cronologia per inserire i commit del tuo branch sopra quelli di un altro branch. Utile per mantenere una cronologia pulita.
‚Ä¢	Attenzione
Non usare rebase su branch gi√† pubblicati se ci lavorano anche altri.
üß® Git Reset
‚Ä¢	git reset --soft HEAD~1
Annulla l‚Äôultimo commit ma mantiene i file in stage.
‚Ä¢	git reset --mixed HEAD~1
Annulla l‚Äôultimo commit, rimuove i file dallo staging ma lascia le modifiche nei file.
‚Ä¢	git reset --hard HEAD~1
Annulla l‚Äôultimo commit e tutte le modifiche ai file. ‚ö†Ô∏è Pericoloso: modifica i file sul disco.
‚Ä¢	git reflog
Mostra la cronologia dei movimenti di HEAD. Utile per recuperare commit persi dopo reset.
‚Ä¢	git reset --hard HEAD@{n}
Ripristina uno stato precedente salvato nel reflog.
